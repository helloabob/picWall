package{	import flash.display.Sprite;	import flash.display.Stage;	import flash.events.EventDispatcher;	import flash.events.TimerEvent;	import flash.geom.Rectangle;	import flash.utils.Timer;
		public class TableViewController extends EventDispatcher	{			//public properties		private var _view:Sprite;		private var _rows:int;		private var _stage:Stage;		private var _lists:Array;				//private properties		private var rowHeight:Number;		private var colCount:int;		private var currentIndex:int=0;		private var offsetXs:Array=[];		private var contentViews:Array;		private var contentView:Sprite;		private var visibleViewIndex:int;				private var is_first_play:Boolean;		private var offset_x:int;				private var _motionViewArray:Array;		private var _currentMotionViewIndex:int;		private var _timer:Timer;		private var _pixelPerTime:int = 5;		private var _imageSize:int;		private var _imageCountPerMotionView:int;		private var _imageCountInMotionView:int;		private var _lastMotionViewOffsetX:int;				private const fixedSize:int = 600;		private const motionViewWidth:int = 1200;				public function TableViewController()		{			_rows = 3;			_view = new Sprite();						_motionViewArray=[new Sprite(),new Sprite()];			_view.addChild(_motionViewArray[0]);			_view.addChild(_motionViewArray[1]);						drawBackColor(_motionViewArray[0],0xff0000);			drawBackColor(_motionViewArray[1],0x00ff00);		}				private function drawBackColor(contain:Sprite,color:uint):void{			contain.graphics.beginFill(color,1);			contain.graphics.drawRect(0,0,motionViewWidth,400);			contain.graphics.endFill();		}				public function start():void{			_imageSize = _stage.stageHeight / _rows;			_motionViewArray[1].x = motionViewWidth;//			for(var i:int=0;i<_rows;i++)offsetXs[i]=0;			is_first_play = true;			calculateImageCountPerMotionView();			loadItem();		}				private function calculateImageCountPerMotionView(offsetX:int=0):void{			var diff:int = motionViewWidth - offsetX;			var result:int = diff / _imageSize;			if(result*_imageSize!=diff)result++;			_imageCountPerMotionView = result * _rows;			_imageCountInMotionView = 0;			_lastMotionViewOffsetX = result * _imageSize - diff;			trace("offset:"+_lastMotionViewOffsetX+"----------"+_imageCountPerMotionView);		}				private function onMove(evt:TimerEvent):void{			if(_motionViewArray[_currentMotionViewIndex].x==-motionViewWidth/4){				moveMotionViewToNail();			}			_motionViewArray[0].x-=_pixelPerTime;			_motionViewArray[1].x-=_pixelPerTime;		}				private function moveMotionViewToNail():void{			_view.swapChildren(_motionViewArray[0],_motionViewArray[1]);			_motionViewArray[_currentMotionViewIndex==0?1:0].removeChildren();			_motionViewArray[_currentMotionViewIndex==0?1:0].x = getMaxSpriteX(_motionViewArray[_currentMotionViewIndex]);			_currentMotionViewIndex = _currentMotionViewIndex==0?1:0;			calculateImageCountPerMotionView(_lastMotionViewOffsetX);			loadItem();		}				private function loadImageView(containIndex:int,count:int):void{					}				private function getMaxSpriteX(contain:Sprite):int{			return contain.x + motionViewWidth;		}				private function getBounds(contain:Sprite):Rectangle{			return new Rectangle(0,0,contain.width,contain.height);		}				private function itemDidAppear(evt:TableViewEvent):void{			var temp:ImageItem = evt.target as ImageItem;			temp.removeEventListener(TableViewEvent.ITEMDIDAPPEAR,itemDidAppear);			_imageCountInMotionView++;			if(currentIndex<_lists.length-1)currentIndex++;			else currentIndex=0;			if(_imageCountInMotionView==_imageCountPerMotionView){				onItemComplete();				return;			}			loadItem();		}		private function onItemComplete():void{			if(_timer==null){				is_first_play=false;				_timer = new Timer(50);				_timer.addEventListener(TimerEvent.TIMER, onMove);				_timer.start();			}		}//				private function loadItem():void{			var item:ImageItem = new ImageItem();			item.height = _imageSize;			item.y = (_imageCountInMotionView%_rows)*_imageSize;			item.x = int(_imageCountInMotionView/_rows)*_imageSize + (is_first_play?0:_lastMotionViewOffsetX);			item.addEventListener(TableViewEvent.ITEMDIDAPPEAR,itemDidAppear);			item.imageName = (currentIndex+1).toString();			_motionViewArray[_currentMotionViewIndex].addChild(item.view);		}				public function get lists():Array		{			return _lists;		}		public function set lists(value:Array):void		{			_lists = value;		}		public function get stage():Stage		{			return _stage;		}		public function set stage(value:Stage):void		{			_stage = value;		}		public function get view():Sprite		{			return _view;		}		public function set view(value:Sprite):void		{			_view = value;		}		public function get rows():int		{			return _rows;		}		public function set rows(value:int):void		{			_rows = value;		}	}}